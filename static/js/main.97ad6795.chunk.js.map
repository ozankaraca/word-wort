{"version":3,"sources":["actions/index.js","constants/actionTypes.js","features/vocabulary/splash.js","features/vocabulary/addWord.js","features/layout/customAppBar.js","features/vocabulary/wordList.js","features/vocabulary/dialog.js","features/vocabulary/index.js","features/quiz/splash.js","features/quiz/popQuiz.js","features/quiz/dialog.js","features/quiz/index.js","features/mainScreen/index.js","App.js","reducers/wordList.js","reducers/appMode.js","reducers/index.js","Store.js","index.js"],"names":["changeAppMode","newAppType","type","payload","useStyles","makeStyles","theme","card","maxWidth","cardContent","height","cardVocab","backgroundColor","palette","secondary","dark","cardIcon","Splash","classes","wordList","useSelector","state","WordList","dispatch","useDispatch","Card","className","CardActionArea","onClick","Grid","alignItems","container","justify","size","icon","faBookOpen","CardContent","Typography","gutterBottom","variant","component","color","length","CardActions","Button","errorMessage","error","main","successMessage","green","AddWord","props","useState","englishWord","setEnglishWord","germanWord","setGermanWord","inputEnglishWord","useRef","inputGermanWord","englishExists","setEnglishExists","germanExists","setGermanExists","useEffect","find","x","toLowerCase","saveData","current","getElementsByTagName","focus","addWord","handleEnter","ev","key","preventDefault","DialogTitle","id","DialogContent","spacing","item","xs","TextField","fullWidth","value","onChange","event","target","onKeyPress","tabIndex","label","ref","FormHelperText","DialogActions","closeAction","disabled","VocabAppBar","appBarTitle","grey","fontWeight","root","primary","AppBar","position","Toolbar","IconButton","edge","aria-label","Icon","title","searchText","setSearchText","List","subheader","ListSubheader","ListItemSecondaryAction","filter","includes","map","word","ListItem","divider","ListItemText","Transition","React","forwardRef","Grow","direction","paperRoot","background","default","fab","bottom","right","ManageDialog","appMode","AppMode","addScreenEnabled","setAddScreenEnabled","Dialog","PaperProps","fullScreen","open","TransitionComponent","Container","Box","mt","mb","Fab","aria-labelledby","Index","isDisabled","setIsDisabled","faSpellCheck","justifyContent","textError","textDecoration","marginLeft","PopQuiz","ready","setReady","currentEnglish","setCurrentEnglish","currentGerman","setCurrentGerman","currentStep","setCurrentStep","isGermanToBeAsked","setIsGermanToBeAsked","resultList","setResultList","englishEl","germanEl","sort","Math","random","slice","questionSet","resultSuccessRate","round","questionEnglish","answerEnglish","questionGerman","answerGerman","handleAnswer","tmpObj","wasGerman","tmpArray","push","alignContent","align","CardHeader","LinearProgress","valueBuffer","inputRef","result","index","wasCorrect","display","style","minHeight","App","useMemo","createMuiTheme","pink","muiTheme","ThemeProvider","CssBaseline","initialState","action","a","b","textA","toUpperCase","textB","newState","val","combineReducers","persistConfig","storage","whitelist","persistedReducer","persistReducer","rootReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","app","loading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.97ad6795.chunk.js","sourcesContent":["import {\r\n  ADD_WORD,\r\n  UPDATE_WORD,\r\n  DELETE_WORD,\r\n  CHANGE_APP_MODE\r\n} from \"../constants/actionTypes\";\r\n\r\nexport const addWord = (englishWord, germanWord) => ({\r\n  type: ADD_WORD,\r\n  payload: {\r\n    englishWord,\r\n    germanWord\r\n  }\r\n});\r\n\r\nexport const updateWord = (englishWord, germanWord, index) => ({\r\n  type: UPDATE_WORD,\r\n  payload: {\r\n    englishWord,\r\n    germanWord\r\n  },\r\n  index: index\r\n});\r\n\r\nexport const deleteWord = englishWord => ({\r\n  type: DELETE_WORD,\r\n  payload: englishWord\r\n});\r\n\r\nexport const changeAppMode = newAppType => ({\r\n  type: CHANGE_APP_MODE,\r\n  payload: newAppType\r\n});\r\n","export const ADD_WORD = \"ADD_WORD\"\r\nexport const UPDATE_WORD = \"UPDATE_WORD\"\r\nexport const DELETE_WORD = \"DELETE_WORD\"\r\n\r\nexport const CHANGE_APP_MODE = \"CHANGE_APP_MODE\"","import React from \"react\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Button,\r\n  Card,\r\n  CardActionArea,\r\n  CardContent,\r\n  CardActions\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { changeAppMode } from \"../../actions/index\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBookOpen } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  card: {\r\n    maxWidth: 345\r\n  },\r\n  cardContent: {\r\n    height: 120\r\n  },\r\n  cardVocab: {\r\n    backgroundColor: theme.palette.secondary.dark\r\n  },\r\n  cardIcon: {\r\n    height: 140\r\n  }\r\n}));\r\n\r\nconst Splash = () => {\r\n  const classes = useStyles();\r\n  const wordList = useSelector(state => state.WordList);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Card className={classes.card + \" \" + classes.cardVocab}>\r\n      <CardActionArea onClick={() => dispatch(changeAppMode(1))}>\r\n        <Grid\r\n          className={classes.cardIcon}\r\n          alignItems=\"center\"\r\n          container\r\n          justify=\"center\"\r\n        >\r\n          <FontAwesomeIcon size=\"6x\" icon={faBookOpen} />\r\n        </Grid>\r\n\r\n        <CardContent className={classes.cardContent}>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            Vocabulary\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            {wordList.length > 0\r\n              ? \"You have \" +\r\n                wordList.length +\r\n                \" words in your vocabulary list. You can add new words that you've learnt or delete the misspelled words.\"\r\n              : \"Your vocabulary list is currently empty. Learn new words and add to your list.\"}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>\r\n        <Button\r\n          onClick={() => dispatch(changeAppMode(1))}\r\n          size=\"small\"\r\n          color=\"inherit\"\r\n        >\r\n          Expand Word List\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Splash;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  FormHelperText,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  makeStyles\r\n} from \"@material-ui/core\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addWord } from \"../../actions/index\";\r\nimport { green } from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  errorMessage: {\r\n    color: theme.palette.error.main\r\n  },\r\n  successMessage: {\r\n    color: green[\"A400\"]\r\n  }\r\n}));\r\n\r\nconst AddWord = props => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  const [englishWord, setEnglishWord] = useState(\"\");\r\n  const [germanWord, setGermanWord] = useState(\"\");\r\n  const inputEnglishWord = useRef(null);\r\n  const inputGermanWord = useRef(null);\r\n  const wordList = useSelector(state => state.WordList);\r\n  const [englishExists, setEnglishExists] = useState(false);\r\n  const [germanExists, setGermanExists] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setEnglishExists(\r\n      wordList.find(\r\n        x => x.englishWord.toLowerCase() === englishWord.toLowerCase()\r\n      )\r\n    );\r\n    setGermanExists(\r\n      wordList.find(\r\n        x => x.germanWord.toLowerCase() === germanWord.toLowerCase()\r\n      )\r\n    );\r\n  }, [englishWord, germanWord]);\r\n\r\n  const saveData = () => {\r\n    !englishWord &&\r\n      inputEnglishWord.current.getElementsByTagName(\"input\")[0].focus();\r\n    !germanWord &&\r\n      inputGermanWord.current.getElementsByTagName(\"input\")[0].focus();\r\n    if (englishWord && germanWord && !englishExists && !germanExists) {\r\n      dispatch(addWord(englishWord, germanWord));\r\n      setEnglishWord(\"\");\r\n      setGermanWord(\"\");\r\n      inputEnglishWord.current.getElementsByTagName(\"input\")[0].focus();\r\n    }\r\n  };\r\n\r\n  const handleEnter = ev => {\r\n    if (ev.key === \"Enter\") {\r\n      saveData();\r\n      ev.preventDefault();\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <DialogTitle id=\"form-dialog-title\">Add Word</DialogTitle>\r\n      <DialogContent>\r\n        <Grid spacing={2} justify=\"center\" container>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              fullWidth\r\n              value={englishWord}\r\n              onChange={event => setEnglishWord(event.target.value)}\r\n              onKeyPress={handleEnter}\r\n              tabIndex=\"0\"\r\n              color=\"secondary\"\r\n              label=\"English Word\"\r\n              ref={inputEnglishWord}\r\n            ></TextField>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              fullWidth\r\n              value={germanWord}\r\n              onChange={event => setGermanWord(event.target.value)}\r\n              onKeyPress={handleEnter}\r\n              tabIndex=\"1\"\r\n              color=\"secondary\"\r\n              label=\"German Word\"\r\n              ref={inputGermanWord}\r\n            ></TextField>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <FormHelperText>Fill The Words and Hit Enter</FormHelperText>\r\n            <FormHelperText className={classes.errorMessage}>\r\n              {germanExists && germanWord + \" Exists in Vocabulary List. \"}\r\n              {englishExists && englishWord + \" Exists in Vocabulary List. \"}\r\n            </FormHelperText>\r\n          </Grid>\r\n        </Grid>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={props.closeAction} tabIndex={-1} color=\"inherit\">\r\n          back\r\n        </Button>\r\n        <Button\r\n          disabled={\r\n            englishExists || !englishWord || germanExists || !germanWord\r\n          }\r\n          onClick={() => saveData()}\r\n          tabIndex={-1}\r\n          color=\"secondary\"\r\n        >\r\n          ADD\r\n        </Button>\r\n      </DialogActions>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddWord;\r\n","import React from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Icon,\r\n  Typography\r\n} from \"@material-ui/core\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { changeAppMode } from \"../../actions/index\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nconst VocabAppBar = props => {\r\n  const useStyles = makeStyles(theme => ({\r\n    appBarTitle: {\r\n      color: theme.palette.grey[100],\r\n      fontWeight: 800\r\n    },\r\n    root: {\r\n      backgroundColor:\r\n        props.color === \"primary\"\r\n          ? theme.palette.primary.dark\r\n          : theme.palette.secondary.dark\r\n    }\r\n  }));\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar className={classes.root} position=\"fixed\">\r\n      <Toolbar>\r\n        <IconButton\r\n          onClick={() => dispatch(changeAppMode(0))}\r\n          className={classes.appBarTitle}\r\n          edge=\"start\"\r\n          aria-label=\"menu\"\r\n        >\r\n          <Icon>arrow_back</Icon>\r\n        </IconButton>\r\n        <Typography className={classes.appBarTitle} variant=\"h6\">\r\n          {props.title}\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default VocabAppBar;\r\n","import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  Icon,\r\n  IconButton,\r\n  TextField,\r\n  ListSubheader\r\n} from \"@material-ui/core\";\r\n\r\nimport { deleteWord } from \"../../actions/index\";\r\n\r\nconst WordList = () => {\r\n  const wordList = useSelector(state => state.WordList);\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <List\r\n      subheader={\r\n        <ListSubheader component=\"div\">\r\n          <ListItemSecondaryAction>\r\n            <TextField\r\n              value={searchText}\r\n              onChange={event => setSearchText(event.target.value)}\r\n              color=\"secondary\"\r\n              label=\"Search\"\r\n            ></TextField>\r\n          </ListItemSecondaryAction>\r\n          Words\r\n        </ListSubheader>\r\n      }\r\n    >\r\n      {wordList\r\n        .filter(\r\n          x =>\r\n            x.englishWord.toLowerCase().includes(searchText.toLowerCase()) ||\r\n            x.germanWord.toLowerCase().includes(searchText.toLowerCase())\r\n        )\r\n        .map((word, key) => {\r\n          return (\r\n            <ListItem key={key} divider>\r\n              <ListItemText\r\n                primary={word.englishWord}\r\n                secondary={word.germanWord}\r\n              ></ListItemText>\r\n              <ListItemSecondaryAction>\r\n                <IconButton\r\n                  onClick={() => dispatch(deleteWord(word.englishWord))}\r\n                >\r\n                  <Icon>delete</Icon>\r\n                </IconButton>\r\n              </ListItemSecondaryAction>\r\n            </ListItem>\r\n          );\r\n        })}\r\n      {wordList.filter(\r\n        x =>\r\n          x.englishWord.toLowerCase().includes(searchText.toLowerCase()) ||\r\n          x.germanWord.toLowerCase().includes(searchText.toLowerCase())\r\n      ).length === 0 && (\r\n        <ListItem>\r\n          <ListItemText secondary=\"No Record Found\"></ListItemText>\r\n        </ListItem>\r\n      )}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default WordList;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Grow,\r\n  Dialog,\r\n  Grid,\r\n  Box,\r\n  Container,\r\n  Icon,\r\n  Fab\r\n} from \"@material-ui/core\";\r\nimport AddWord from \"./addWord\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport CustomAppBar from \"../layout/customAppBar\";\r\nimport WordList from \"./wordList\";\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Grow direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  paperRoot: {\r\n    backgroundColor: theme.palette.background.default\r\n  },\r\n  fab: {\r\n    position: \"fixed\",\r\n    bottom: theme.spacing(2),\r\n    right: theme.spacing(4)\r\n  }\r\n}));\r\n\r\nconst ManageDialog = () => {\r\n  const appMode = useSelector(state => state.AppMode);\r\n  const classes = useStyles();\r\n  const [addScreenEnabled, setAddScreenEnabled] = useState(false);\r\n  return (\r\n    <Dialog\r\n      PaperProps={{\r\n        className: classes.paperRoot\r\n      }}\r\n      fullScreen\r\n      open={appMode === 1}\r\n      TransitionComponent={Transition}\r\n    >\r\n      <CustomAppBar title=\"Vocabulary List\" color=\"secondary\" />\r\n      <Grid container justify=\"center\">\r\n        <Container maxWidth=\"md\">\r\n          <Box mt={10} mb={10}>\r\n            <WordList />\r\n          </Box>\r\n        </Container>\r\n      </Grid>\r\n      <Fab\r\n        color=\"secondary\"\r\n        aria-label=\"add\"\r\n        onClick={() => setAddScreenEnabled(true)}\r\n        className={classes.fab}\r\n      >\r\n        <Icon>add</Icon>\r\n      </Fab>\r\n      <Dialog open={addScreenEnabled} aria-labelledby=\"form-dialog-title\">\r\n        <AddWord closeAction={() => setAddScreenEnabled(false)} />\r\n      </Dialog>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default ManageDialog;\r\n","import React from \"react\";\r\nimport Splash from \"./splash\";\r\nimport ManageDialog from \"./dialog\";\r\n\r\nconst Index = () => {\r\n  return (\r\n    <>\r\n      <ManageDialog />\r\n      <Splash />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Button,\r\n  Card,\r\n  CardActionArea,\r\n  CardContent,\r\n  CardActions\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { changeAppMode } from \"../../actions/index\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSpellCheck } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Splash = () => {\r\n  const dispatch = useDispatch();\r\n  const wordList = useSelector(state => state.WordList);\r\n  const [isDisabled, setIsDisabled] = useState(false);\r\n  useEffect(() => {\r\n    setIsDisabled(wordList.length < 20);\r\n  }, [wordList]);\r\n  const useStyles = makeStyles(theme => ({\r\n    card: {\r\n      maxWidth: 345\r\n    },\r\n    cardContent: {\r\n      height: 120\r\n    },\r\n    cardVocab: {\r\n      backgroundColor: isDisabled\r\n        ? theme.palette.grey[800]\r\n        : theme.palette.primary.dark,\r\n      color: !isDisabled ? theme.palette.grey[100] : theme.palette.grey[500]\r\n    },\r\n    cardIcon: {\r\n      height: 140\r\n    }\r\n  }));\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.card + \" \" + classes.cardVocab}>\r\n      <CardActionArea\r\n        disabled={isDisabled}\r\n        onClick={() => dispatch(changeAppMode(2))}\r\n      >\r\n        <Grid\r\n          className={classes.cardIcon}\r\n          alignItems=\"center\"\r\n          container\r\n          justify=\"center\"\r\n        >\r\n          <FontAwesomeIcon size=\"6x\" icon={faSpellCheck} />\r\n        </Grid>\r\n\r\n        <CardContent className={classes.cardContent}>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            Pop Quiz\r\n          </Typography>\r\n          <Typography variant=\"body2\" component=\"p\">\r\n            {!isDisabled\r\n              ? \"Test your vocabulary, find out your progress easily.\"\r\n              : \"You don't have enough words to test yourself. Fill the words in vocabulary list and get ready for the challange.\"}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>\r\n        <Button\r\n          onClick={() => dispatch(changeAppMode(2))}\r\n          size=\"small\"\r\n          disabled={isDisabled}\r\n          color=\"inherit\"\r\n        >\r\n          Challenge Yourself\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Splash;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Typography,\r\n  Button,\r\n  TextField,\r\n  Icon,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  CardActions,\r\n  LinearProgress,\r\n  Box,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemSecondaryAction\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    justifyContent: \"center\"\r\n  },\r\n  textError: {\r\n    textDecoration: \"line-through\",\r\n    marginLeft: \"10px\"\r\n  },\r\n}));\r\n\r\nconst PopQuiz = () => {\r\n  const classes = useStyles();\r\n  const [ready, setReady] = useState(false);\r\n  const [currentEnglish, setCurrentEnglish] = useState(\"\");\r\n  const [currentGerman, setCurrentGerman] = useState(\"\");\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n  const [isGermanToBeAsked, setIsGermanToBeAsked] = useState(false);\r\n  const [resultList, setResultList] = useState([]);\r\n  const englishEl = useRef();\r\n  const germanEl = useRef();\r\n  const [questionSet] = useState(\r\n    useSelector(state => state.WordList)\r\n      .sort(() => 0.5 - Math.random())\r\n      .slice(0, 20)\r\n  );\r\n\r\n  let resultSuccessRate = Math.round(\r\n    (resultList.filter(\r\n      x =>\r\n        x.questionEnglish.toLowerCase() === x.answerEnglish.toLowerCase() &&\r\n        x.questionGerman.toLowerCase() === x.answerGerman.toLowerCase()\r\n    ).length /\r\n      (resultList ? resultList.length : 1)) *\r\n      100\r\n  );\r\n\r\n  const handleAnswer = () => {\r\n    let tmpObj = {\r\n      questionGerman: questionSet[currentStep].germanWord,\r\n      answerGerman: currentGerman,\r\n      questionEnglish: questionSet[currentStep].englishWord,\r\n      answerEnglish: currentEnglish,\r\n      wasGerman: isGermanToBeAsked\r\n    };\r\n    let tmpArray = resultList;\r\n    tmpArray.push(tmpObj);\r\n    setResultList(tmpArray);\r\n\r\n    setIsGermanToBeAsked(Math.random() >= 0.5);\r\n    setCurrentStep(currentStep + 1);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (currentStep < 20) {\r\n      setCurrentEnglish(\r\n        isGermanToBeAsked ? questionSet[currentStep].englishWord : \"\"\r\n      );\r\n      setCurrentGerman(\r\n        isGermanToBeAsked ? \"\" : questionSet[currentStep].germanWord\r\n      );\r\n      isGermanToBeAsked\r\n        ? germanEl.current && germanEl.current.focus()\r\n        : englishEl.current && englishEl.current.focus();\r\n    }\r\n  }, [currentStep]);\r\n\r\n  const handleEnter = ev => {\r\n    if (ev.key === \"Enter\") {\r\n      currentGerman && currentEnglish && handleAnswer();\r\n      ev.preventDefault();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Grid\r\n        spacing={2}\r\n        container\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n        alignContent=\"center\"\r\n      >\r\n        {!ready && currentStep < 20 && (\r\n          <>\r\n            <Grid xs={12} item>\r\n              <Box mt={10}>\r\n                <Typography variant=\"h5\" align=\"center\">\r\n                  In this quiz, you will be asked 20 questions. WordWort will\r\n                  give you a German or English word, and you will write down the\r\n                  equivelant of the word in other language. When you feel ready,\r\n                  hit it on!\r\n                </Typography>\r\n              </Box>\r\n            </Grid>\r\n            <Button\r\n              onClick={() => {\r\n                setReady(true);\r\n              }}\r\n              size=\"large\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              READY\r\n            </Button>\r\n          </>\r\n        )}\r\n        {ready && currentStep < 20 && (\r\n          <Grid item>\r\n            <Card>\r\n              <CardHeader\r\n                title={\r\n                  <LinearProgress\r\n                    variant=\"buffer\"\r\n                    value={currentStep * 5}\r\n                    valueBuffer={100}\r\n                  ></LinearProgress>\r\n                }\r\n              ></CardHeader>\r\n              <CardContent>\r\n                <Grid spacing={2} container>\r\n                  <Grid xs={12} item>\r\n                    <TextField\r\n                      disabled={isGermanToBeAsked}\r\n                      inputRef={englishEl}\r\n                      onKeyPress={handleEnter}\r\n                      fullWidth\r\n                      label=\"In English\"\r\n                      value={currentEnglish}\r\n                      onChange={event => setCurrentEnglish(event.target.value)}\r\n                    ></TextField>\r\n                  </Grid>\r\n                  <Grid xs={12} item>\r\n                    <TextField\r\n                      disabled={!isGermanToBeAsked}\r\n                      inputRef={germanEl}\r\n                      onKeyPress={handleEnter}\r\n                      fullWidth\r\n                      label=\"In German\"\r\n                      value={currentGerman}\r\n                      onChange={event => setCurrentGerman(event.target.value)}\r\n                    ></TextField>\r\n                  </Grid>\r\n                </Grid>\r\n              </CardContent>\r\n              <CardActions>\r\n                <Grid container justify=\"flex-end\">\r\n                  <Button\r\n                    onClick={handleAnswer}\r\n                    disabled={\r\n                      isGermanToBeAsked ? !currentGerman : !currentEnglish\r\n                    }\r\n                    color=\"primary\"\r\n                  >\r\n                    {currentStep < 19 ? \"Next\" : \"Finish\"}\r\n                  </Button>\r\n                </Grid>\r\n              </CardActions>\r\n            </Card>\r\n          </Grid>\r\n        )}\r\n\r\n        {currentStep === 20 && (\r\n          <>\r\n            <Grid item xs={12}>\r\n              <Typography\r\n                color={resultSuccessRate < 49 ? \"error\" : \"primary\"}\r\n                align=\"center\"\r\n                variant=\"h4\"\r\n              >\r\n                <Box fontWeight={900}>Success Rate: {resultSuccessRate}%</Box>\r\n              </Typography>\r\n            </Grid>\r\n            <Grid xs={12} item>\r\n              <List>\r\n                {resultList.map((result, index) => {\r\n                  let wasCorrect = result.wasGerman\r\n                    ? result.questionGerman.toLowerCase() ===\r\n                      result.answerGerman.toLowerCase()\r\n                    : result.questionEnglish.toLowerCase() ===\r\n                      result.answerEnglish.toLowerCase();\r\n                  return (\r\n                    <ListItem divider key={index}>\r\n                      {result.wasGerman && (\r\n                        <>\r\n                          <ListItemText\r\n                            primary={\r\n                              <>\r\n                                <Typography display=\"inline\">\r\n                                  {result.questionGerman}\r\n                                </Typography>\r\n                                <Typography\r\n                                  align=\"right\"\r\n                                  display=\"inline\"\r\n                                  color=\"error\"\r\n                                  variant=\"subtitle2\"\r\n                                  className={classes.textError}\r\n                                >\r\n                                  {!wasCorrect && result.answerGerman}\r\n                                </Typography>\r\n                              </>\r\n                            }\r\n                            secondary={result.questionEnglish}\r\n                          ></ListItemText>\r\n                        </>\r\n                      )}\r\n                      {!result.wasGerman && (\r\n                        <>\r\n                          <ListItemText\r\n                            primary={\r\n                              <>\r\n                                <Typography display=\"inline\">\r\n                                  {result.questionEnglish}\r\n                                </Typography>\r\n                                <Typography\r\n                                  align=\"right\"\r\n                                  display=\"inline\"\r\n                                  color=\"error\"\r\n                                  variant=\"subtitle2\"\r\n                                  className={classes.textError}\r\n                                >\r\n                                  {!wasCorrect && result.answerEnglish}\r\n                                </Typography>\r\n                              </>\r\n                            }\r\n                            secondary={result.questionGerman}\r\n                          ></ListItemText>\r\n                        </>\r\n                      )}\r\n                      <ListItemSecondaryAction>\r\n                        <Icon color={wasCorrect ? \"primary\" : \"error\"}>\r\n                          {wasCorrect ? \"check_circle_outline\" : \"close\"}\r\n                        </Icon>\r\n                      </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                  );\r\n                })}\r\n              </List>\r\n            </Grid>\r\n          </>\r\n        )}\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PopQuiz;\r\n","import React from \"react\";\r\nimport { Dialog, Grow, Grid, makeStyles, Box } from \"@material-ui/core\";\r\nimport { useSelector } from \"react-redux\";\r\nimport CustomAppBar from \"../layout/customAppBar\";\r\nimport PopQuiz from \"./popQuiz\";\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Grow direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  paperRoot: {\r\n    backgroundColor: theme.palette.background.default\r\n  }\r\n}));\r\nconst ManageDialog = () => {\r\n  const appMode = useSelector(state => state.AppMode);\r\n  const classes = useStyles();\r\n  return (\r\n    <Dialog\r\n      PaperProps={{\r\n        className: classes.paperRoot\r\n      }}\r\n      fullScreen\r\n      open={appMode === 2}\r\n      TransitionComponent={Transition}\r\n    >\r\n      <CustomAppBar title=\"Quiz\" color=\"primary\" />\r\n      <Grid container justify=\"center\">\r\n        <Grid item xs={12}>\r\n          <Box mt={10}>\r\n            <PopQuiz />\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default ManageDialog;\r\n","import React from \"react\";\r\nimport Splash from \"../quiz/splash\";\r\nimport ManageDialog from \"./dialog\";\r\n\r\nconst Index = () => {\r\n  return (\r\n    <>\r\n      <ManageDialog />\r\n      <Splash />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n","import React from \"react\";\r\nimport { Grid, Container, Box } from \"@material-ui/core\";\r\nimport Vocabulary from \"../vocabulary/index\";\r\nimport Quiz from \"../quiz/index\";\r\n\r\nconst Index = () => {\r\n  return (\r\n    <div>\r\n      <Container maxWidth={false}>\r\n        <Box mt={3}>\r\n          <Grid\r\n            justify=\"center\"\r\n            direction=\"row\"\r\n            style={{\r\n              minHeight: \"100vh\"\r\n            }}\r\n            spacing={2}\r\n            alignItems=\"center\"\r\n            container\r\n          >\r\n            <Grid item>\r\n              <Vocabulary />\r\n            </Grid>\r\n            <Grid item>\r\n              <Quiz />\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n","import React from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nimport MainScreen from \"./features/mainScreen/index\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport {\n  green,\n  pink\n} from \"@material-ui/core/colors\";\n\nfunction App() {\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: \"dark\",\n          primary: {\n            main: green[\"A200\"]\n          },\n          secondary: {\n            main: pink[\"A200\"]\n          }\n        }\n      }),\n    []\n  );\n  const muiTheme = createMuiTheme(theme);\n  return (\n    <ThemeProvider theme={muiTheme}>\n      <CssBaseline />\n      <div className=\"App\">\n        <MainScreen />\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ADD_WORD, UPDATE_WORD, DELETE_WORD } from \"../constants/actionTypes\";\r\n\r\nconst initialState = [\r\n  { englishWord: \"Hello\", germanWord: \"Hallo\" },\r\n  { englishWord: \"Love\", germanWord: \"Liebe\" },\r\n  { englishWord: \"Hate\", germanWord: \"Hass\" },\r\n  { englishWord: \"Success\", germanWord: \"Erfolg\" },\r\n  { englishWord: \"Brother\", germanWord: \"Bruder\" },\r\n  { englishWord: \"Victory\", germanWord: \"Sieg\" },\r\n  { englishWord: \"Laugh\", germanWord: \"Lachen\" },\r\n  { englishWord: \"Income\", germanWord: \"Einkommen\" },\r\n  { englishWord: \"Truth\", germanWord: \"Wahrheit\" },\r\n  { englishWord: \"act\", germanWord: \"Akt\" },\r\n  { englishWord: \"why\", germanWord: \"warum\" },\r\n  { englishWord: \"ask\", germanWord: \"fragen\" },\r\n  { englishWord: \"men\", germanWord: \"Männer\" },\r\n  { englishWord: \"change\", germanWord: \"Veränderung\" },\r\n  { englishWord: \"went\", germanWord: \"ging\" },\r\n  { englishWord: \"light\", germanWord: \"Licht\" },\r\n  { englishWord: \"kind\", germanWord: \"Art\" },\r\n  { englishWord: \"off\", germanWord: \"aus\" },\r\n  { englishWord: \"need\", germanWord: \"müssen\" },\r\n  { englishWord: \"house\", germanWord: \"Haus\" },\r\n  { englishWord: \"picture\", germanWord: \"Bild\" },\r\n  { englishWord: \"try\", germanWord: \"versuchen\" },\r\n  { englishWord: \"us\", germanWord: \"uns\" },\r\n  { englishWord: \"again\", germanWord: \"wieder\" },\r\n  { englishWord: \"animal\", germanWord: \"Tier\" },\r\n  { englishWord: \"point\", germanWord: \"Punkt\" },\r\n  { englishWord: \"mother\", germanWord: \"Mutter\" },\r\n  { englishWord: \"world\", germanWord: \"Welt\" },\r\n  { englishWord: \"build\", germanWord: \"bauen\" },\r\n  { englishWord: \"self\", germanWord: \"selbst\" }\r\n];\r\n\r\nconst WordList = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_WORD:\r\n      if (\r\n        !state.find(\r\n          x =>\r\n            x.englishWord.toLowerCase() ===\r\n            action.payload.englishWord.toLowerCase()\r\n        )\r\n      ) {\r\n        return [...state, action.payload].sort(function(a, b) {\r\n          var textA = a.englishWord.toUpperCase();\r\n          var textB = b.englishWord.toUpperCase();\r\n          return textA < textB ? -1 : textA > textB ? 1 : 0;\r\n        });\r\n      } else {\r\n        return state;\r\n      }\r\n    case UPDATE_WORD:\r\n      return state.map((item, index) => {\r\n        debugger;\r\n        if (index !== action.index) {\r\n          return item;\r\n        }\r\n        return {\r\n          ...item,\r\n          ...action.payload\r\n        };\r\n      });\r\n    case DELETE_WORD:\r\n      const newState = state.filter(val => val.englishWord !== action.payload);\r\n      return newState;\r\n    default:\r\n      return state.sort(function(a, b) {\r\n        var textA = a.englishWord.toUpperCase();\r\n        var textB = b.englishWord.toUpperCase();\r\n        return textA < textB ? -1 : textA > textB ? 1 : 0;\r\n      });\r\n  }\r\n};\r\n\r\nexport default WordList;\r\n","import { CHANGE_APP_MODE } from \"../constants/actionTypes\";\r\n\r\nconst initialState = 0;\r\n\r\nconst AppMode = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CHANGE_APP_MODE:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default AppMode;\r\n","import { combineReducers } from \"redux\";\r\nimport WordList from './wordList'\r\nimport AppMode from './appMode'\r\n\r\nexport default combineReducers({ WordList, AppMode });","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers/index\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n  whitelist: [\"WordList\"]\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const store = createStore(\r\n  persistedReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport const persistor = persistStore(store);","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { store, persistor } from \"./Store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nconst app = (\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\n"],"sourceRoot":""}